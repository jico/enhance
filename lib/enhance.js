// Generated by CoffeeScript 1.6.3
(function() {
  var Enhance, _;

  _ = require('./lodash-ext');

  Enhance = (function() {
    return function(options) {
      var defaults, exports, helpers, isHiDPI, isMobileDevice, render;
      defaults = {
        host: null,
        suffix: '@2x',
        phoneBreakpoint: 480,
        tabletBreakpoint: 1024,
        tabletAsMobile: false
      };
      options = _.merge(defaults, options);
      isHiDPI = function(ratio) {
        var query;
        if (ratio == null) {
          ratio = 1.3;
        }
        query = "only screen and (-moz-min-device-pixel-ratio: " + ratio + "),         only screen and (-o-min-device-pixel-ratio: " + (ratio * 2) + "/2),         only screen and (-webkit-min-device-pixel-ratio: " + ratio + "),         only screen and (min-device-pixel-ratio: " + ratio + "),         only screen and (min-resolution: " + ratio + "dppx)";
        if (window.devicePixelRatio > ratio) {
          return true;
        }
        if (typeof window.matchMedia === "function" ? window.matchMedia(query).matches : void 0) {
          return true;
        }
        return false;
      };
      isMobileDevice = function() {
        var breakpoint, mobileDevice;
        mobileDevice = options.tabletAsMobile ? 'tablet' : 'phone';
        breakpoint = options["" + mobileDevice + "Breakpoint"];
        return typeof window.matchMedia === "function" ? window.matchMedia("only screen and (max-width: " + breakpoint + "px)").matches : void 0;
      };
      helpers = {
        _: _,
        isHiDPI: isHiDPI
      };
      render = function(src, opts) {
        var regexp;
        if (options.render != null) {
          return typeof options.render === "function" ? options.render(_.merge({
            src: src
          }, options, opts, helpers)) : void 0;
        } else {
          regexp = new RegExp(/(.jpe?g|.png|.gif|.ti?ff?)/i);
          if (isHiDPI()) {
            src = src.replace(regexp, "" + options.suffix + "$1");
          }
          return _.joinURIComponents(options.host, src);
        }
      };
      return exports = {
        isHiDPI: isHiDPI,
        render: render,
        isMobileDevice: isMobileDevice
      };
    };
  })();

  if (typeof window !== "undefined" && window !== null) {
    window.Enhance = Enhance;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Enhance;
  }

}).call(this);
